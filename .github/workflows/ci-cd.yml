name: 🚀 Portal NIMOENERGIA CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # =====================================================
  # TESTES BACKEND
  # =====================================================
  backend-tests:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: portal_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📥 Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black

    - name: 🔍 Code quality check
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .

    - name: 🧪 Run tests
      env:
        DATABASE_TYPE: mysql
        DATABASE_HOST: localhost
        DATABASE_USER: root
        DATABASE_PASSWORD: test_password
        DATABASE_NAME: portal_test
        SECRET_KEY: test-secret-key
        JWT_SECRET_KEY: test-jwt-secret
      run: |
        cd backend
        pytest --cov=. --cov-report=xml --cov-report=html

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # =====================================================
  # TESTES FRONTEND
  # =====================================================
  frontend-tests:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📥 Install dependencies
      run: |
        cd frontend
        npm ci

    - name: 🔍 Lint check
      run: |
        cd frontend
        npm run lint

    - name: 🧪 Run tests
      run: |
        cd frontend
        npm run test:coverage

    - name: 🏗️ Build check
      run: |
        cd frontend
        npm run build

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # =====================================================
  # SECURITY SCAN
  # =====================================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =====================================================
  # BUILD DOCKER
  # =====================================================
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/portal-nimoenergia:latest
          ${{ secrets.DOCKER_USERNAME }}/portal-nimoenergia:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =====================================================
  # DEPLOY STAGING
  # =====================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Heroku Staging
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: "portal-nimoenergia-staging"
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        usedocker: true

    - name: 🧪 Run smoke tests
      run: |
        sleep 30
        curl -f https://portal-nimoenergia-staging.herokuapp.com/api/health || exit 1

  # =====================================================
  # DEPLOY PRODUCTION
  # =====================================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Heroku Production
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: "portal-nimoenergia"
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        usedocker: true

    - name: 🧪 Run smoke tests
      run: |
        sleep 30
        curl -f https://portal-nimoenergia.herokuapp.com/api/health || exit 1

    - name: 📢 Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: '🎉 Portal NIMOENERGIA deployed successfully to production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 📢 Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: '❌ Portal NIMOENERGIA deployment to production failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =====================================================
  # PERFORMANCE TESTS
  # =====================================================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚡ Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://portal-nimoenergia-staging.herokuapp.com
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: 🔥 Run load tests
      run: |
        npm install -g artillery
        artillery quick --count 10 --num 5 https://portal-nimoenergia-staging.herokuapp.com/api/health

