#!/bin/bash

# üîç Script de Verifica√ß√£o - Portal NIMOENERGIA
# Verifica se o sistema est√° funcionando corretamente

# Cores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[‚úÖ PASS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[‚ö†Ô∏è  WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚ùå FAIL]${NC} $1"
}

# Contador de testes
TESTS_PASSED=0
TESTS_FAILED=0
TESTS_WARNED=0

# Fun√ß√£o para executar teste
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_result="$3"
    
    print_info "Testando: $test_name"
    
    if eval "$test_command" > /dev/null 2>&1; then
        print_success "$test_name"
        ((TESTS_PASSED++))
        return 0
    else
        if [ "$expected_result" = "warning" ]; then
            print_warning "$test_name (n√£o cr√≠tico)"
            ((TESTS_WARNED++))
            return 1
        else
            print_error "$test_name"
            ((TESTS_FAILED++))
            return 1
        fi
    fi
}

# Banner
echo "
üîç Portal NIMOENERGIA - Verifica√ß√£o do Sistema
============================================
"

print_info "Iniciando verifica√ß√£o completa..."

# 1. Verificar estrutura de arquivos
print_info "üìÅ Verificando estrutura de arquivos..."

run_test "Diret√≥rio backend existe" "[ -d 'backend' ]"
run_test "Diret√≥rio frontend existe" "[ -d 'frontend' ]"
run_test "Arquivo main.py existe" "[ -f 'backend/main.py' ]"
run_test "Arquivo package.json existe" "[ -f 'frontend/package.json' ]"
run_test "Arquivo requirements.txt existe" "[ -f 'backend/requirements.txt' ]"

# 2. Verificar depend√™ncias do sistema
print_info "üîß Verificando depend√™ncias do sistema..."

run_test "Git instalado" "command -v git"
run_test "Python 3 instalado" "command -v python3"
run_test "Node.js instalado" "command -v node"
run_test "npm instalado" "command -v npm"

# 3. Verificar ambiente Python
print_info "üêç Verificando ambiente Python..."

run_test "Ambiente virtual existe" "[ -d 'backend/venv' ]"

if [ -d "backend/venv" ]; then
    cd backend
    source venv/bin/activate
    
    run_test "Flask instalado" "python -c 'import flask'"
    run_test "Flask-CORS instalado" "python -c 'import flask_cors'"
    run_test "PyJWT instalado" "python -c 'import jwt'"
    run_test "bcrypt instalado" "python -c 'import bcrypt'"
    run_test "python-dotenv instalado" "python -c 'import dotenv'"
    
    # Testar importa√ß√£o do main
    run_test "main.py import√°vel" "python -c 'import main'"
    
    cd ..
else
    print_error "Ambiente virtual n√£o encontrado - pulando testes Python"
    ((TESTS_FAILED += 5))
fi

# 4. Verificar ambiente Node.js
print_info "‚öõÔ∏è Verificando ambiente Node.js..."

run_test "node_modules existe" "[ -d 'frontend/node_modules' ]"

if [ -d "frontend/node_modules" ]; then
    cd frontend
    
    run_test "React instalado" "npm list react --depth=0"
    run_test "Vite instalado" "npm list vite --depth=0"
    run_test "Vitest instalado" "npm list vitest --depth=0" "warning"
    
    cd ..
else
    print_error "node_modules n√£o encontrado - pulando testes Node.js"
    ((TESTS_FAILED += 3))
fi

# 5. Verificar configura√ß√µes
print_info "‚öôÔ∏è Verificando configura√ß√µes..."

run_test "Arquivo .env backend existe" "[ -f 'backend/.env' ]"
run_test "Arquivo .env.local frontend existe" "[ -f 'frontend/.env.local' ]" "warning"

# 6. Verificar servi√ßos (se estiverem rodando)
print_info "üåê Verificando servi√ßos..."

run_test "Backend respondendo" "curl -s http://localhost:5000/api/health" "warning"
run_test "Frontend acess√≠vel" "curl -s http://localhost:3000" "warning"

# 7. Verificar banco de dados
print_info "üóÑÔ∏è Verificando banco de dados..."

if [ -f "backend/.env" ]; then
    cd backend
    if [ -d "venv" ]; then
        source venv/bin/activate
        run_test "Conex√£o com banco" "python -c '
from database_manager import DatabaseManager
db = DatabaseManager()
conn = db.get_connection()
if conn: 
    conn.close()
    print(\"OK\")
else: 
    raise Exception(\"No connection\")
'" "warning"
    fi
    cd ..
fi

# 8. Verificar scripts
print_info "üìú Verificando scripts..."

run_test "Script setup.sh existe" "[ -f 'setup.sh' ]" "warning"
run_test "Script start.sh existe" "[ -f 'start.sh' ]" "warning"

# 9. Verificar permiss√µes
print_info "üîê Verificando permiss√µes..."

run_test "Backend/main.py leg√≠vel" "[ -r 'backend/main.py' ]"
run_test "Frontend/package.json leg√≠vel" "[ -r 'frontend/package.json' ]"

# 10. Testes funcionais b√°sicos
print_info "üß™ Executando testes funcionais..."

# Teste de importa√ß√£o Python
if [ -d "backend/venv" ]; then
    cd backend
    source venv/bin/activate
    
    run_test "Teste de importa√ß√£o Flask" "python -c '
from flask import Flask
app = Flask(__name__)
print(\"OK\")
'"
    
    run_test "Teste de configura√ß√£o" "python -c '
import os
from dotenv import load_dotenv
load_dotenv()
print(\"OK\")
'"
    
    cd ..
fi

# Teste de build frontend
if [ -d "frontend/node_modules" ]; then
    cd frontend
    run_test "Build frontend" "npm run build" "warning"
    cd ..
fi

# Relat√≥rio final
echo "
üìä RELAT√ìRIO DE VERIFICA√á√ÉO
==========================

‚úÖ Testes Passaram: $TESTS_PASSED
‚ö†Ô∏è  Avisos: $TESTS_WARNED  
‚ùå Testes Falharam: $TESTS_FAILED

"

if [ $TESTS_FAILED -eq 0 ]; then
    print_success "üéâ Sistema verificado com sucesso!"
    print_info "‚úÖ Pronto para execu√ß√£o!"
    
    if [ $TESTS_WARNED -gt 0 ]; then
        print_warning "‚ö†Ô∏è  Alguns avisos foram encontrados, mas n√£o s√£o cr√≠ticos."
    fi
    
    echo "
üöÄ Pr√≥ximos passos:
   1. Execute: ./start.sh
   2. Acesse: http://localhost:3000
   3. Fa√ßa login com: admin@nimoenergia.com.br / senha123
"
    
elif [ $TESTS_FAILED -le 3 ]; then
    print_warning "‚ö†Ô∏è  Sistema com problemas menores"
    print_info "Alguns testes falharam, mas o sistema pode funcionar."
    print_info "Execute ./setup.sh para corrigir problemas de configura√ß√£o."
    
else
    print_error "‚ùå Sistema com problemas cr√≠ticos"
    print_info "Muitos testes falharam. Execute ./setup.sh para configurar o ambiente."
fi

echo "
üìñ Para mais informa√ß√µes:
   ‚Ä¢ Consulte o GUIA_INSTALACAO_LOCAL.md
   ‚Ä¢ Execute ./setup.sh para configura√ß√£o autom√°tica
   ‚Ä¢ Verifique os logs de erro acima
"

